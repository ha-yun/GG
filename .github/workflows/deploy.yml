name: Docker, Ci/Cd, EC2

on:
  push:
    branches:
      - deploy-test

jobs:
  docker-cicd:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # 빌드 타임아웃을 15분으로 증가
    steps:
      - name: 소스코드 체크아웃
        uses: actions/checkout@v4
        with:
          ref: deploy-test  # 정확한 브랜치 체크아웃!
  
      - name: 현재 상황 체크
        run: |
            pwd
            ls

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: 도커허브 로그인
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: 도커 허브에 이미지 빌드
        run: docker-compose build

      - name: 도커 허브에 이미지 빌드 확인
        run: docker images

      - name: 도커 허브에 이미지 푸시
        run: docker-compose push

      - name: EC2 서버로 필요 파일 업로드
        uses: appleboy/scp-action@v0.1.7
        # 업로드 대상이 n개이면 |로 구성해서 파일,파일, ... / 너무 많으면 압축해서 올리고 풀어버리는게 나음
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          source: 
            docker-compose.prod.yml
          target: /home/ubuntu

  deploy:
    runs-on: ubuntu-latest
    needs: docker-cicd
    steps:
      - name: ec2에 SSH 접속 -> 도커 컴포즈 가동
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script_stop: true
            # 이미지를 갱신하지는 않는다 -> 도커 컴포즈 파일에 기술하여 버전관리
            # 이미지에 TAG를 기입하여 버전을 관리한다면 매번 갱신 가능(이미지)
          script: |
            sudo docker-compose -f docker-compose.prod.yml down
            sudo docker-compose -f docker-compose.prod.yml up -d 
